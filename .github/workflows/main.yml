# This is a basic workflow to help you get started with Actions

name: Gihub Actions Maven Build Example

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
#  push:
#    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      JF_ARTIFACTORY_1: ${{ secrets.JF_ARTIFACTORY_SECRET_1 }}
      JFROG_BUILD_STATUS: PASS

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
       # setup JFrog CLI
      - name: Step 1-  Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v1


      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Step 2-  Checkout main branch from Github
        uses: actions/checkout@v2

      # Setup JDK 1.8
      - name: Step3 - Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      # Verify artifactory conenctivity
      - name: Step4 - Ping RT
        run: |
          # Ping the server
          jfrog rt ping

      - name: Step5- Run Maven build
        env:
          SERVER_ID: swampup113
        run: |
          # Init JFrog CLI Maven config
          MVN_PATH=`which mvn` && export M2_HOME=`readlink -f $MVN_PATH | xargs dirname | xargs dirname`
          # Replace ‘my_art_server’ with your imported server
          #jfrog rt mvn-config --server-id-resolve=${{ secrets.JF_ARTIFACTORY_SECRET_1 }}  --repo-resolve-releases=libs-release-remote --repo-resolve-snapshots=libs-snapshot-remote
          jfrog rt mvn-config --server-id-resolve=$SERVER_ID --server-id-deploy=$SERVER_ID --repo-resolve-releases=maven-remote --repo-resolve-snapshots=maven-remote --repo-deploy-releases=backend-libs-release-local --repo-deploy-snapshots=backend-libs-snapshot-local                                                                                                                                                                                                                                                                                                 
          # Build the maven project
          #jfrog rt mvn -B package --file pom.xml
          #jfrog rt mvn clean install -f pom.xml
          #jfrog rt mvn -f pom.xml
          jfrog rt mvn clean install

      - name: Step6- Failure check
        run: |
          echo "JFROG_BUILD_STATUS=FAIL" >> $GITHUB_ENV
        if: failure()

      
      - name: Step7 - Publish to RT
        run: |
          # Add env vars
          jfrog rt bce
          # Collect VCS details from git and add them to the build
          jfrog rt bag
          #Publish build-info
          jfrog rt bp 
          # Prerequisite to xray scan a build
          # 1. Make sure this build is indexed in Admin->Xray->Settings->Indexed Resources->Builds tab( see https://jfrog.com/knowledge-base/xray-how-to-index-and-scan-all-builds-in-xray-in-the-unified-platform/ )
          # 2. A watch on the build resource is defined and mapped to a policy that has he policy has  option "fail on build" selected ( see https://stackoverflow.com/questions/55992256/xray-scan-does-not-find-any-watch-when-launched-from-azure-devops-pipeline)
          # 3. Scan build with JFrog Xray and if you do not want the build to fail use "--fail=false"
          jfrog rt bs --fail=false > out.txt

          # Show the output
          cat out.txt
          # Update the PR comment
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}  gh pr comment ${{ github.event.pull_request.head.ref }} --body-file out.txt



      - name: Step5 - list files
        run: ls  -a
        
      - name: Step6 - What is in target folder
        run: |
           cd target
           ls  -a       
